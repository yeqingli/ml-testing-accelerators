# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"apiVersion": "batch/v1beta1"
"kind": "CronJob"
"metadata":
  "labels":
    "accelerator": "v3-32"
    "benchmarkId": "pt-r1.9-mnist-conv-v3-32-1vm"
    "frameworkVersion": "pt-r1.9"
    "mode": "conv"
    "model": "mnist"
  "name": "pt-r1.9-mnist-conv-v3-32-1vm"
  "namespace": "automated"
"spec":
  "concurrencyPolicy": "Forbid"
  "jobTemplate":
    "metadata":
      "annotations":
        "ml-testing-accelerators/gcs-subdir": "pt-r1.9/mnist/conv/v3-32"
        "ml-testing-accelerators/metric-config": |
          {
            "sources": [
              {
                "literals": {
                  "assertions": {
                    "duration": {
                      "inclusive_bounds": false,
                      "std_devs_from_mean": {
                        "comparison": "LESS",
                        "std_devs": 5
                      },
                      "wait_for_n_data_points": 10
                    }
                  }
                }
              },
              {
                "tensorboard": {
                  "aggregate_assertions": [
                    {
                      "assertion": {
                        "fixed_value": {
                          "comparison": "GREATER",
                          "value": 98
                        },
                        "inclusive_bounds": false,
                        "wait_for_n_data_points": 0
                      },
                      "strategy": "FINAL",
                      "tag": "Accuracy/test"
                    },
                    {
                      "assertion": {
                        "inclusive_bounds": false,
                        "std_devs_from_mean": {
                          "comparison": "LESS",
                          "std_devs": 5
                        },
                        "wait_for_n_data_points": 10
                      },
                      "strategy": "FINAL",
                      "tag": "ExecuteTime__Percentile_99_sec"
                    },
                    {
                      "assertion": {
                        "inclusive_bounds": true,
                        "std_devs_from_mean": {
                          "comparison": "LESS",
                          "std_devs": 0
                        },
                        "wait_for_n_data_points": 0
                      },
                      "strategy": "FINAL",
                      "tag": "aten_ops_sum"
                    }
                  ],
                  "exclude_tags": [
                    "LearningRate"
                  ],
                  "include_tags": [
                    {
                      "strategies": [
                        "FINAL"
                      ],
                      "tag_pattern": "*"
                    }
                  ],
                  "merge_runs": true
                }
              }
            ]
          }
      "labels":
        "accelerator": "v3-32"
        "benchmarkId": "pt-r1.9-mnist-conv-v3-32-1vm"
        "frameworkVersion": "pt-r1.9"
        "mode": "conv"
        "model": "mnist"
    "spec":
      "activeDeadlineSeconds": 3600
      "backoffLimit": 0
      "template":
        "metadata":
          "annotations":
            "reserved.cloud-tpus.google.com": "false"
            "tf-version.cloud-tpus.google.com": "v2-nightly"
        "spec":
          "containers":
          - "args": null
            "command":
            - "bash"
            - "-c"
            - |
              set -x
              set -u
              ssh -i scripts/id_rsa -o StrictHostKeyChecking=no xl-ml-test@$(cat /scripts/tpu_ip) \
                'ls'
              scp -i scripts/id_rsa /scripts/tpu_name xl-ml-test@$(cat /scripts/tpu_ip):~
              ssh -i scripts/id_rsa -o StrictHostKeyChecking=no xl-ml-test@$(cat /scripts/tpu_ip) << 'TEST_SCRIPT_EOF'
                journalctl
                cat ~/tpu_name
                ls
                echo | gcloud compute config-ssh
                /bin/bash -c set -u
              set -e
              set -x
              
              sudo ls -l /datasets
              sudo ls -l /datasets/mnist-data
              python3 -m torch_xla.distributed.xla_dist --tpu=$(cat ~/tpu_name) -- python3 /usr/share/pytorch/xla/test/test_train_mp_mnist.py --logdir='' --fake_data
              
              
              TEST_SCRIPT_EOF
              exit_code=$?
              bash /scripts/cleanup.sh
              exit $exit_code
            "env":
            - "name": "POD_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.name"
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            - "name": "POD_NAMESPACE"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.namespace"
            - "name": "JOB_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.labels['job-name']"
            - "name": "MODEL_DIR"
              "value": "$(OUTPUT_BUCKET)/pt-r1.9/mnist/conv/v3-32/$(JOB_NAME)"
            - "name": "KUBE_GOOGLE_CLOUD_TPU_ENDPOINTS"
              "value": "tpu-$(POD_UID)"
            - "name": "LOCAL_OUTPUT_DIR"
              "value": "/tmp/model_dir"
            - "name": "XLA_USE_BF16"
              "value": "0"
            "envFrom":
            - "configMapRef":
                "name": "gcs-buckets"
            - "configMapRef":
                "name": "pytorch-nfs-ip"
            "image": "google/cloud-sdk"
            "imagePullPolicy": "Always"
            "lifecycle":
              "preStop":
                "exec":
                  "command":
                  - "bash"
                  - "/scripts/cleanup.sh"
            "name": "train"
            "resources":
              "limits":
                "tpu.googleapis.com/v3": 32
              "requests":
                "cpu": "4.5"
                "memory": "8Gi"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
              "readOnly": false
            - "mountPath": "/dev/shm"
              "name": "dshm"
              "readOnly": false
            - "mountPath": "/datasets"
              "name": "pytorch-datasets-claim"
              "readOnly": true
          "initContainers":
          - "command":
            - "/bin/bash"
            - "-c"
            - |
              set -u
              set -e
              set -x
              
              project=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google")
              zone=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | awk -F'/' '{print $4}')
              tpu_name=tpu-${POD_UID}
              ssh-keygen -t rsa -f /scripts/id_rsa -q -N ""
              
              echo "
              gcloud alpha compute tpus tpu-vm delete -q ${tpu_name} --zone=${zone}
              " > /scripts/cleanup.sh
              
              echo "xl-ml-test:$(cat /scripts/id_rsa.pub)" > ssh-keys.txt
              echo 'sudo bash /var/scripts/docker-login.sh
              sudo docker rm libtpu || true
              sudo docker create --name libtpu gcr.io/cloud-tpu-v2-images/libtpu:pytorch-1.9 "/bin/bash"
              sudo docker cp libtpu:libtpu.so /lib
              sudo pip3 uninstall --yes torch torch_xla torchvision numpy
              sudo pip3 install https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch-1.9-cp38-cp38-linux_x86_64.whl https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-1.9-cp38-cp38-linux_x86_64.whl https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torchvision-1.9-cp38-cp38-linux_x86_64.whl numpy
              sudo pip3 install mkl mkl-include numpy
              sudo ln -s /usr/local/lib/libmkl_intel_lp64.so.1 /usr/local/lib/libmkl_intel_lp64.so
              sudo ln -s /usr/local/lib/libmkl_intel_thread.so.1 /usr/local/lib/libmkl_intel_thread.so
              sudo ln -s /usr/local/lib/libmkl_core.so.1 /usr/local/lib/libmkl_core.so
              sudo apt-get -y update
              sudo apt-get install -y libomp5 nfs-common
              cd /usr/share
              git clone https://github.com/pytorch/pytorch.git -b release/1.9
              cd pytorch
              git clone https://github.com/pytorch/xla.git -b r1.9
              export LD_PRELOAD="/usr/lib/x86_64-linux-gnu/libtcmalloc.so.4"
              sudo mkdir /datasets
              sudo mount 10.182.107.26:/pytorch_datasets /datasets
              echo Done XLA startup script
              ' > startup-script.txt
              
              # Retry every 30 seconds for 10 minutes
              for i in {1..20}; do
                set +e
                gcloud alpha compute tpus tpu-vm create ${tpu_name} \
                  --accelerator-type='v3-32' \
                  --version='v2-nightly'  \
                  --metadata-from-file='ssh-keys=ssh-keys.txt,startup-script=startup-script.txt' \
                  --labels='test-name=pt-r1-9-mnist-conv-v3-32-1vm' \
                  --zone=${zone}
              
                exit_code=$?
                set -e
                test $exit_code = 0 && break || sleep 30;
              done
              
              if [ $exit_code -ne 0 ]; then
                exit $exit_code
              fi
              
              echo ${tpu_name} > /scripts/tpu_name
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --format="value(networkEndpoints[0].ipAddress)" > /scripts/tpu_ip
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --flatten="networkEndpoints[]" --format="csv[no-heading](networkEndpoints.ipAddress)" > /scripts/all_tpu_ips
              
              sleep 360
              
            "env":
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            "image": "google/cloud-sdk"
            "name": "create-tpu"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
          "nodeSelector":
            "tpu-available": "true"
          "priorityClassName": "tpu-pod"
          "restartPolicy": "Never"
          "volumes":
          - "emptyDir":
              "medium": "Memory"
            "name": "scripts"
          - "emptyDir":
              "medium": "Memory"
            "name": "dshm"
          - "name": "pytorch-datasets-claim"
            "persistentVolumeClaim":
              "claimName": "pytorch-datasets-claim"
  "schedule": "0 7 * * 1,3,5"
  "successfulJobsHistoryLimit": 1